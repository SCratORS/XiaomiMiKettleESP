substitutions:
  dev_name: xiaomi-mi-smart-kittle
  ntc_gpio: A0
  beeper_gpio: GPIO5
  touch_1_gpio: GPIO0
  touch_2_gpio: GPIO12
  led_1_gpio: GPIO13
  led_2_gpio: GPIO14
  watter_gpio: GPIO2
  heater_gpio: GPIO4

esphome:
  name: ${dev_name}
  comment: "Чайник Xiaomi MI Kittle"
  on_boot:
    priority: 600
    then:
      - script.execute: play_beep
      - light.turn_on: led_2
      - delay: 1s
      - light.turn_off: led_2

esp8266:
  board: esp12e
  restore_from_flash: true
  
# Enable logging
logger:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: ${dev_name}
    password: "12345678"

captive_portal:

api:

ota:
  password: "12345678"

light:
  - platform: status_led
    id: led_1
    pin: ${led_1_gpio}
  - platform: binary
    id: led_2
    output: led_2_out

globals:
  - id: heater_status
    type: bool
    initial_value: 'false'
  - id: pid_status
    type: bool
    initial_value: 'false'

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${dev_name}_ip
      icon: "mdi:lan"
    ssid:
      name: ${dev_name}_ssid
      icon: "mdi:wifi"
    mac_address:
      name: ${dev_name}_mac
      icon: "mdi:lan"

button:
  - platform: restart
    name: ${dev_name}_restart

output:
  - platform: esp8266_pwm
    pin: ${beeper_gpio}
    id: beeper
  - platform: gpio
    pin: ${led_2_gpio}
    id: led_2_out
  - platform: gpio
    pin: ${heater_gpio}
    id: heater

rtttl:
  output: beeper

script:
  - id: play_beep
    then:
      - rtttl.play: 'long:d=4,o=5,b=80:e6'

  - id: action_heater_on
    then:
      if:
        condition:
          or:
            - sensor.in_range:
                id: temperature
                above: 92.0
            - lambda: 'return id(pid_status) && (id(temperature).state > id(target).state);'
        then:
          - script.execute: action_heater_off
        else:
          - if:
              condition:
                lambda: 'return id(heater_status);'
              then:
                - light.turn_off: led_1
                - switch.template.publish:
                    id: pid_heater
                    state: false
                - light.turn_on: led_2
                - switch.template.publish:
                    id: switch_heater
                    state: true
          - if:     
              condition:
                lambda: 'return id(pid_status);'
              then:
                - light.turn_off: led_2
                - switch.template.publish:
                    id: switch_heater
                    state: false
                - light.turn_on: led_1
                - switch.template.publish:
                    id: pid_heater
                    state: true
          - output.turn_on: heater
          - script.execute: play_beep

  - id: action_heater_off
    then:
      - output.turn_off: heater
      - switch.template.publish:
          id: switch_heater
          state: false
      - switch.template.publish:
          id: pid_heater
          state: false
      - light.turn_off: led_1
      - light.turn_off: led_2
      - if:
          condition:
            lambda: 'return id(pid_status) || id(heater_status);'
          then:
            - script.execute: play_beep
      - lambda: 'id(heater_status) = false;'
      - lambda: 'id(pid_status) = false;'

  - id: touch_1_action
    then:
      - if:
          condition:
            lambda: 'return id(pid_status);'
          then:
            - script.execute: action_heater_off
          else:
            - lambda: 'id(heater_status) = false;'
            - lambda: 'id(pid_status) = true;'
            - script.execute: action_heater_on

  - id: touch_2_action
    then:
      - if:
          condition:
            lambda: 'return id(heater_status);'
          then:
            - script.execute: action_heater_off
          else:
            - lambda: 'id(pid_status) = false;'
            - lambda: 'id(heater_status) = true;'
            - script.execute: action_heater_on

number:
  - platform: template
    name: ${dev_name}_target
    optimistic: true
    min_value: 40.0
    max_value: 80.0
    step: 5.0
    restore_value: true
    id: target
    icon: "mdi:water-thermometer"
    unit_of_measurement: "°C"
    on_value:
      lambda: 'global_preferences->sync();'

switch:
  - platform: template
    id: switch_heater
    name: ${dev_name}
    icon: "mdi:kettle-steam"
    turn_on_action:
      - lambda: 'id(pid_status) = false;'
      - lambda: 'id(heater_status) = true;'
      - script.execute: action_heater_on
    turn_off_action:
      - script.execute: action_heater_off
  - platform: template
    id: pid_heater
    name: ${dev_name}_warm
    icon: "mdi:kettle"
    turn_on_action:
      - lambda: 'id(heater_status) = false;'
      - lambda: 'id(pid_status) = true;'
      - script.execute: action_heater_on
    turn_off_action:
      - script.execute: action_heater_off

binary_sensor:
  - platform: gpio
    pin: 
      number: ${touch_1_gpio}
      inverted: True
    id: touch_1
    filters:
      - delayed_on: 50ms
    on_press:
      then:
        - script.execute: touch_1_action
  - platform: gpio
    pin: 
      number: ${touch_2_gpio}
      inverted: True
    id: touch_2
    filters:
      - delayed_on: 50ms
    on_press:
      then:
        - script.execute: touch_2_action

sensor:
  - platform: resistance
    id: resistance_ntc_sensor
    sensor: source_ntc_sensor
    configuration: UPSTREAM
    resistor: 28.2kOhm
    reference_voltage:  1V

  - platform: adc
    id: source_ntc_sensor
    pin: ${ntc_gpio}
    update_interval: 5s

  - platform: ntc
    name: ${dev_name}_temperature
    id: temperature
    sensor: resistance_ntc_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 100kOhm   
    on_value_range:
      - above: 95.0
        then:
          - script.execute: action_heater_off
    on_value:
      - if:
          condition:
            lambda: 'return id(pid_status) && (x > id(target).state);'
          then:
            - script.execute: action_heater_off